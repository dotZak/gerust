use crate::{connect_pool, DbPool};
use {{crate_name}}_config::DatabaseConfig;
use rand::distributions::Alphanumeric;
use rand::{thread_rng, Rng};
use regex::{Captures, Regex};
use sqlx::postgres::{PgConnectOptions, PgConnection};
use sqlx::{Connection, Executor};
use std::str::FromStr;
use std::sync::Arc;

{% if template_type == 'full' %}
pub mod users;
{%- endif %}

#[allow(unused)]
pub async fn setup_db(config: &DatabaseConfig) -> DbPool {
    let test_db_config = prepare_db(config).await;
    connect_pool(test_db_config)
        .await
        .expect("Could not connect to database!")
}

pub async fn teardown_db(db_pool: DbPool) {
    let mut connect_options = db_pool.connect_options();
    let db_config = Arc::make_mut(&mut connect_options);

    drop(db_pool);

    let root_db_config = db_config.clone().database("postgres");
    let mut connection: PgConnection = Connection::connect_with(&root_db_config).await.unwrap();

    let test_db_name = db_config.get_database().unwrap();

    let query = format!("DROP DATABASE IF EXISTS {}", test_db_name);
    connection.execute(query.as_str()).await.unwrap();
}

pub async fn prepare_db(config: &DatabaseConfig) -> DatabaseConfig {
    let db_config = parse_db_config(&config.url);
    let db_name = db_config.get_database().unwrap();

    let root_db_config = db_config.clone().database("postgres");
    let mut connection: PgConnection = Connection::connect_with(&root_db_config).await.unwrap();

    let test_db_name = build_test_db_name(db_name);

    let query = format!("CREATE DATABASE {} TEMPLATE {}", test_db_name, db_name);
    connection.execute(query.as_str()).await.unwrap();

    let regex = Regex::new(r"(.+)\/(.+$)").unwrap();
    let test_db_url = regex.replace(&config.url, |caps: &Captures| {
        format!("{}/{}", &caps[1], test_db_name)
    });

    DatabaseConfig {
        url: test_db_url.to_string(),
    }
}

fn build_test_db_name(base_name: &str) -> String {
    let test_db_suffix: String = thread_rng()
        .sample_iter(&Alphanumeric)
        .take(30)
        .map(char::from)
        .collect();
    format!("{}_{}", base_name, test_db_suffix).to_lowercase()
}

fn parse_db_config(url: &str) -> PgConnectOptions {
    PgConnectOptions::from_str(url).expect("Invalid DATABASE_URL!")
}
