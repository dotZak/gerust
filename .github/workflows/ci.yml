name: CI

on:
  push:
    branches:
      - main
  pull_request: {}

jobs:
  cargo_check:
    name: "Cargo Check"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: cargo check
      uses: actions-rs/cargo@v1.0.1
      with:
        command: check

  rustfmt:
    name: "Rust Format"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: rustfmt

    - name: fmt
      uses: actions-rs/cargo@v1.0.1
      with:
        command: fmt
        args: --all -- --check

  clippy:
    name: "Clippy"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: clippy

    - name: clippy
      uses: actions-rs/cargo@v1.0.1
      with:
        command: clippy
        args: --all-targets -- -D warnings

  test:
    name: "Test"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: test
      run: cargo test

  generate:
    name: Generate example app
    runs-on: ubuntu-latest

    env:
      PS_CLI_LOCAL_DEV: 1

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: my_app
          POSTGRES_USER: my_app
          POSTGRES_PASSWORD: my_app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
        with:
           ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      
      - name: generate
        run: cargo run --package pacesetter-cli my-app

      - name: use-local-pacesetter
        run: |
          cd my-app/cli
          cargo add pacesetter --path ../../pacesetter
          cd ../config
          cargo add pacesetter --path ../../pacesetter
          cd ../web
          cargo add pacesetter --path ../../pacesetter
          cargo add --dev pacesetter-procs --path ../../pacesetter-procs

      - uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        with:
          name: my-app
          path: |
            my-app
          if-no-files-found: error
          retention-days: 1

  test-generated:
    name: "Test generated example app"
    runs-on: ubuntu-latest
    needs: generate

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: my_app_test
          POSTGRES_USER: my_app_test
          POSTGRES_PASSWORD: my_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rust-lang/setup-rust-toolchain@v1

    - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
      with:
        name: my-app
        path: my-app

    - name: migrate
      run: |
        cd my-app
        cargo db reset -e test

    - name: test
      run: |
        cd my-app
        cargo test

  fmt-generated:
    name: "Validate format of generated example app"
    runs-on: ubuntu-latest
    needs: generate
    
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    
    - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
      with:
        name: my-app
        path: my-app
    
    - name: fmt-generated
      run: |
        cd my-app
        cargo fmt --all -- --check

  clippy-generated:
    name: "Run Clippy on generated example app"
    runs-on: ubuntu-latest
    needs: generate
    
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    
    - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
      with:
        name: my-app
        path: my-app
    
    - name: clippy-generated
      run: |
        cd my-app
        cargo clippy --all-targets -- -D warnings

  run-generated:
    name: "Run generated example app"
    runs-on: ubuntu-latest
    needs: generate

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: my_app
          POSTGRES_USER: my_app
          POSTGRES_PASSWORD: my_app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    
    - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
      with:
        name: my-app
        path: my-app
    
    - name: run-generated
      run: |
        cd my-app
        cargo run & (timeout 120 sh -c 'until nc -z $0 $1; do sleep 1; done' localhost 3000)
