use axum::body::Bytes;
use axum::response::Response;
use axum::{
    body::Body,
    http::{self, Method},
};
use fake::{Fake, Faker};
use hyper::StatusCode;
use {{db_crate_name}}::{entities, transaction, Error};
use pacesetter::test::helpers::{request, DbTestContext};
use pacesetter_procs::db_test;
use serde_json::json;
use std::collections::HashMap;
use uuid::Uuid;

mod common;

#[db_test]
async fn test_create_invalid(context: &DbTestContext) {
    todo!("send invalid changeset, assert 422 response!");

    /* Example:
    let mut headers = HashMap::new();
    headers.insert(http::header::CONTENT_TYPE.as_str(), "application/json");

    let payload = json!(entities::{{entity_plural_name}}::{{entity_struct_name}}Changeset {
        description: String::from("")
    });

    let response = request(
        &context.app,
        "/{{entity_plural_name}}",
        headers,
        Body::from(payload.to_string()),
        Method::POST,
    )
    .await;

    assert_eq!(response.status(), StatusCode::UNPROCESSABLE_ENTITY);
    */
}

#[db_test]
async fn test_create_success(context: &DbTestContext) {
    todo!("send valid changeset, assert 201 response!");

    /* Example:
    let mut headers = HashMap::new();
    headers.insert(http::header::CONTENT_TYPE.as_str(), "application/json");

    let changeset: entities::{{entity_plural_name}}::{{entity_struct_name}}Changeset = Faker.fake();
    let payload = json!(changeset);

    let response = request(
        &context.app,
        "/{{entity_plural_name}}",
        headers,
        Body::from(payload.to_string()),
        Method::POST,
    )
    .await;

    assert_eq!(response.status(), StatusCode::CREATED);

    let {{entity_plural_name}} = {{entity_plural_name}} = entities::{{entity_plural_name}}::load_all(&app_state.db_pool);
    assert_eq!({{entity_plural_name}}.len(), 1);
    assert_eq!(
        {{entity_plural_name}}.first().unwrap().description,
        changeset.description
    );
    */
}

#[db_test]
async fn test_read_all(context: &DbTestContext) {
    todo!("arrange DB, load all entities, assert all are returned!");

    /* Example:
    let changeset: entities::{{entity_plural_name}}::{{entity_struct_name}}Changeset = Faker.fake();
    entities::{{entity_plural_name}}::create(changeset.clone(), &context.db_pool)
        .await
        .unwrap();

    let response = request(
        &context.app,
        "/{{entity_plural_name}}",
        HashMap::new(),
        Body::empty(),
        Method::GET,
    )
    .await;

    assert_eq!(response.status(), StatusCode::OK);

    let {{entity_plural_name}}: Vec<entities::{{entity_plural_name}}::{{entity_struct_name}}> = json_body::<Vec<entities::{{entity_plural_name}}::{{entity_struct_name}}>>(response).await;
    assert_eq!({{entity_plural_name}}.len(), 1);
    assert_eq!(
        {{entity_plural_name}}.first().unwrap().description,
        changeset.description
    );
    */
}

#[db_test]
async fn test_read_one_nonexistent(context: &DbTestContext) {
    todo!("read non-existent entity, assert 404 response!");

    /* Example:
    let response = request(
        &context.app,
        format!("/{{entity_plural_name}}/{}", Uuid::new_v4()).as_str(),
        HashMap::new(),
        Body::empty(),
        Method::GET,
    )
    .await;

    assert_eq!(response.status(), StatusCode::NOT_FOUND);
    */
}

#[db_test]
async fn test_read_one_success(context: &DbTestContext) {
    todo!("arrange DB, load entity, assert it is returned!");

    /* Example:
    let {{entity_singular_name}}_changeset: entities::{{entity_plural_name}}::{{entity_struct_name}}Changeset = Faker.fake();
    let {{entity_singular_name}} = create_task{{entity_singular_name}}({{entity_singular_name}}_changeset.clone(), &context.db_pool)
        .await
        .unwrap();
    let {{entity_singular_name}}_id = {{entity_singular_name}}.id;

    let response = request(
        &context.app,
        format!("/{{entity_plural_name}}/{}", {{entity_singular_name}}_id).as_str(),
        HashMap::new(),
        Body::empty(),
        Method::GET,
    )
    .await;

    assert_eq!(response.status(), StatusCode::OK);

    let {{entity_singular_name}}: entities::{{entity_plural_name}}::{{entity_struct_name}} = json_body::<entities::{{entity_plural_name}}::{{entity_struct_name}}>(response).await;
    assert_eq!({{entity_singular_name}}.id, {{entity_singular_name}}_id);
    assert_eq!({{entity_singular_name}}.description, {{entity_singular_name}}_changeset.description);
    */
}

#[db_test]
async fn test_update_invalid(context: &DbTestContext) {
    todo!("arrange DB, send invalid changeset, assert 422 response and nothing changes in DB!");

    /* Example:
    let {{entity_singular_name}}_changeset: entities::{{entity_plural_name}}::{{entity_struct_name}}ChangesetChangeset = Faker.fake();
    let {{entity_singular_name}} = create_task({{entity_singular_name}}_changeset.clone(), &context.db_pool)
        .await
        .unwrap();

    let mut headers = HashMap::new();
    headers.insert(http::header::CONTENT_TYPE.as_str(), "application/json");

    let payload = json!(entities::{{entity_plural_name}}::{{entity_struct_name}}Changeset {
        description: String::from("")
    });

    let response = request(
        &context.app,
        &format!("/{{entity_plural_name}}/{}", {{entity_singular_name}}.id),
        headers,
        Body::from(payload.to_string()),
        Method::PUT,
    )
    .await;

    assert_eq!(response.status(), StatusCode::UNPROCESSABLE_ENTITY);

    let {{entity_singular_name}}_after = load_{{entity_singular_name}}({{entity_singular_name}}.id, &context.db_pool).await.unwrap();
    assert_eq!({{entity_singular_name}}_after.description, {{entity_singular_name}}.description);
    */
}

#[db_test]
async fn test_update_nonexistent(context: &DbTestContext) {
    todo!("send valid changeset for non-existent ID, assert 404 response!");

    /* Example:
    let mut headers = HashMap::new();
    headers.insert(http::header::CONTENT_TYPE.as_str(), "application/json");

    let {{entity_singular_name}}_changeset: entities::{{entity_plural_name}}::{{entity_struct_name}}Changeset = Faker.fake();
    let payload = json!({{entity_singular_name}}_changeset);

    let response = request(
        &context.app,
        &format!("/{{entity_plural_name}}/{}", Uuid::new_v4()),
        headers,
        Body::from(payload.to_string()),
        Method::PUT,
    )
    .await;

    assert_eq!(response.status(), StatusCode::NOT_FOUND);
    */
}

#[db_test]
async fn test_update_success(context: &DbTestContext) {
    todo!("arrange DB, send valid changeset, assert 200 response and changes applied in DB!");

    /* Example:
    let {{entity_singular_name}}_changeset: entities::{{entity_plural_name}}::{{entity_struct_name}}Changeset = Faker.fake();
    let {{entity_singular_name}} = create_{{entity_singular_name}}({{entity_singular_name}}_changeset.clone(), &context.db_pool)
        .await
        .unwrap();

    let mut headers = HashMap::new();
    headers.insert(http::header::CONTENT_TYPE.as_str(), "application/json");

    let {{entity_singular_name}}_changeset: entities::{{entity_plural_name}}::{{entity_struct_name}}Changeset = Faker.fake();
    let payload = json!({{entity_singular_name}}_changeset);

    let response = request(
        &context.app,
        &format!("/{{entity_plural_name}}/{}", {{entity_singular_name}}.id),
        headers,
        Body::from(payload.to_string()),
        Method::PUT,
    )
    .await;

    assert_eq!(response.status(), StatusCode::OK);

    let {{entity_singular_name}}: entities::{{entity_plural_name}}::{{entity_struct_name}} = json_body::<Task>(response).await;
    assert_eq!({{entity_singular_name}}.description, {{entity_singular_name}}_changeset.description);

    let {{entity_singular_name}} = load_{{entity_singular_name}}({{entity_singular_name}}.id, &context.db_pool).await.unwrap();
    assert_eq!({{entity_singular_name}}.description, {{entity_singular_name}}_changeset.description);
    */
}

#[db_test]
async fn test_delete_nonexistent(context: &DbTestContext) {
    todo!("delete non-existing ID, assert 404 response!");

    /* Example:
    let response = request(
        &context.app,
        &format!("/{{entity_plural_name}}/{}", Uuid::new_v4()),
        HashMap::<&str, &str>::new(),
        Body::empty(),
        Method::DELETE,
    )
    .await;

    assert_eq!(response.status(), StatusCode::NOT_FOUND);
    */
}

#[db_test]
async fn test_delete_success(context: &DbTestContext) {
    todo!("arrange DB, delete, assert 204 response and record deleted in dB!");

    /* Example:
    let {{entity_singular_name}}_changeset: entities::{{entity_plural_name}}::{{entity_struct_name}}Changeset = Faker.fake();
    let {{entity_singular_name}} = create_{{entity_singular_name}}({{entity_singular_name}}_changeset.clone(), &context.db_pool)
        .await
        .unwrap();

    let response = request(
        &context.app,
        &format!("/{{entity_plural_name}}/{}", {{entity_singular_name}}.id),
        HashMap::<&str, &str>::new(),
        Body::empty(),
        Method::DELETE,
    )
    .await;

    assert_eq!(response.status(), StatusCode::NO_CONTENT);

    let result = load_{{entity_singular_name}}({{entity_singular_name}}.id, &context.db_pool).await;
    assert!(result.is_err());
    */
}

async fn json_body<T>(response: Response<Body>) -> T
where
    T: serde::de::DeserializeOwned,
{
    let body = response_body(response).await;
    serde_json::from_slice::<T>(&body).expect("Failed to deserialize JSON body")
}

async fn response_body(response: Response<Body>) -> Bytes {
    // We don't care about the size limit in tests.
    axum::body::to_bytes(response.into_body(), usize::MAX)
        .await
        .expect("Failed to read response body")
}
